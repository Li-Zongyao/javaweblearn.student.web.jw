'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cell = require('cell.js');

var _cell2 = _interopRequireDefault(_cell);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
  function _class() {
    _classCallCheck(this, _class);

    this.deps = [];
    this.counts = {};

    this.skips = [];
  }

  _createClass(_class, [{
    key: 'run',
    value: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this.prepare();

              case 3:
                if (!this.deps.length) {
                  _context.next = 8;
                  break;
                }

                _context.next = 6;
                return this.count();

              case 6:
                _context.next = 9;
                break;

              case 8:
                console.log('no any dependencies in your project');

              case 9:
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](0);

                console.log(_context.t0);

              case 14:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 11]]);
      }));

      function run() {
        return _ref.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'prepare',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var pkg;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                pkg = (0, _utils.locateRoot)();
                _context2.prev = 1;
                _context2.next = 4;
                return (0, _utils.readDeps)(pkg);

              case 4:
                this.deps = _context2.sent;
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2['catch'](1);
                throw new Error('cannot get dependencies from ' + pkg);

              case 10:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 7]]);
      }));

      function prepare() {
        return _ref2.apply(this, arguments);
      }

      return prepare;
    }()
  }, {
    key: 'count',
    value: function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
        var tasks, self, headers, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, h, config, cell, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                tasks = [];
                self = this;

                if (!(this.deps.length > 0)) {
                  _context3.next = 24;
                  break;
                }

                headers = ['repo', 'stars', 'forks', 'watchings', 'issues'];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context3.prev = 7;

                for (_iterator = headers[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  h = _step.value;
                  config = this._cellConfig(h, h);
                  cell = new _cell2.default(config);

                  cell.write();
                }
                _context3.next = 15;
                break;

              case 11:
                _context3.prev = 11;
                _context3.t0 = _context3['catch'](7);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 15:
                _context3.prev = 15;
                _context3.prev = 16;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 18:
                _context3.prev = 18;

                if (!_didIteratorError) {
                  _context3.next = 21;
                  break;
                }

                throw _iteratorError;

              case 21:
                return _context3.finish(18);

              case 22:
                return _context3.finish(15);

              case 23:
                console.log('\n');

              case 24:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context3.prev = 27;

                _loop = function _loop() {
                  var dep = _step2.value;

                  var t = (0, _utils.readNpmMeta)(dep).then(_utils.getGithubUrl).then(_utils.getGithubMatrix).then(function (info) {
                    info.repo = dep;
                    self.output(info);
                  }).catch(function () {
                    self.skips.push(dep);
                  });
                  tasks.push(t);
                };

                for (_iterator2 = this.deps[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  _loop();
                }
                _context3.next = 36;
                break;

              case 32:
                _context3.prev = 32;
                _context3.t1 = _context3['catch'](27);
                _didIteratorError2 = true;
                _iteratorError2 = _context3.t1;

              case 36:
                _context3.prev = 36;
                _context3.prev = 37;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 39:
                _context3.prev = 39;

                if (!_didIteratorError2) {
                  _context3.next = 42;
                  break;
                }

                throw _iteratorError2;

              case 42:
                return _context3.finish(39);

              case 43:
                return _context3.finish(36);

              case 44:
                return _context3.abrupt('return', Promise.all(tasks));

              case 45:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[7, 11, 15, 23], [16,, 18, 22], [27, 32, 36, 44], [37,, 39, 43]]);
      }));

      function count() {
        return _ref3.apply(this, arguments);
      }

      return count;
    }()
  }, {
    key: 'output',
    value: function output(info) {
      var keys = ['repo', 'stars', 'forks', 'watchings', 'issues'];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var k = _step3.value;

          var config = this._cellConfig(k, info[k]);
          var cell = new _cell2.default(config);
          cell.write();
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      console.log('');
    }
  }, {
    key: '_cellConfig',
    value: function _cellConfig(name, value) {
      var align = 'left';
      var length = 10;
      if (name === 'repo') {
        align = 'right';
        length = 25;
      }
      return {
        length: length,
        content: String(value),
        foregroundColor: 245,
        backgroundColor: 'black',
        align: align
      };
    }
  }]);

  return _class;
}();

exports.default = _class;