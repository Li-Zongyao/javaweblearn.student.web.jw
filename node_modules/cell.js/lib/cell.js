'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _charm = require('charm');

var _charm2 = _interopRequireDefault(_charm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CHARM = (0, _charm2.default)();

var _class = function () {
  function _class() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _class);

    this.content = config.content || '';
    this.length = config.length || 1;

    this.defaultBackgroundColor = config.defaultBackgroundColor || 'black';

    this.align = config.align || 'left';
    this.backgroundColor = config.backgroundColor;
    this.charm = CHARM;
    this.init();

    this.current = 0;
  }

  _createClass(_class, [{
    key: 'init',
    value: function init() {
      this.charm.pipe(process.stdout);

      this.placeHolder = new Array(this.length + 1).join(' ');
      if (this.backgroundColor) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.placeHolder[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var c = _step.value;

            this.charm.background(this.backgroundColor).write(String(c));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.placeHolder[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _c = _step2.value;

            this.charm.write(String(_c));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      // step back to start of the progress bar
      this.charm.move(-this.length, 0);
    }
  }, {
    key: 'write',
    value: function write() {
      if (this.align === 'left') {
        this.writeFromLeft();
      } else if (this.align === 'right') {
        this.writeFromRight();
      } else {
        this.writeFromCenter();
      }

      this.jumpToEnd();
      // this.charm.pop()
      this.charm.background(this.defaultBackgroundColor).write(' ');
      this.charm.end();
      this.charm.pop();
      // console.log(this.current)
    }
  }, {
    key: 'step',
    value: function step(c) {
      this.charm.write(c);
      this.current++;
    }
  }, {
    key: 'setStart',
    value: function setStart(n) {
      this.charm.move(n, 0);
    }
  }, {
    key: 'jumpToEnd',
    value: function jumpToEnd() {
      var left = this.length - this.current;
      this.charm.move(left, 0);
    }
  }, {
    key: 'writeFromLeft',
    value: function writeFromLeft() {
      for (var i = 0; i < this.content.length && i < this.length; i++) {
        this.step(String(this.content[i]));
      }
    }
  }, {
    key: 'writeFromCenter',
    value: function writeFromCenter() {
      var start = 0;
      if (this.content.length < this.length) {
        start = Math.floor((this.length - this.content.length) / 2);
        this.setStart(start);
      }

      for (var i = 0; i < this.content.length && i < this.length; i++) {
        this.step(String(this.content[i]));
      }
    }
  }, {
    key: 'writeFromRight',
    value: function writeFromRight() {
      var start = 0;
      if (this.content.length < this.length) {
        start = this.length - this.content.length;
        this.setStart(start);
      }

      for (var i = 0; i < this.content.length && i < this.length; i++) {
        this.step(String(this.content[i]));
      }
    }
  }]);

  return _class;
}();

exports.default = _class;